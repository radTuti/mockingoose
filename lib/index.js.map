{"version":3,"sources":["../src/index.js"],"names":["Promise","connect","jest","fn","resolve","ops","mockedReturn","cb","op","modelName","model","Model","mock","mockingoose","__mocks","err","Error","Array","isArray","map","item","reject","forEach","Query","prototype","mockImplementation","criteria","doc","options","callback","arguments","length","undefined","exec","call","save","constructor","Object","assign","doMock","target","resetAll","toJSON","traps","get","prop","hasOwnProperty","Reflect","toReturn","o","reset","Proxy"],"mappings":"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","file":"index.js","sourcesContent":["import mongoose from 'mongoose';\n\nmongoose.Promise = Promise;\nmongoose.connect = jest.fn(() => Promise.resolve());\n\nconst ops = [\n  'find',\n  'findOne',\n  'count',\n  'distinct',\n  'findOneAndUpdate',\n  'findOneAndRemove',\n  'remove',\n  'deleteOne',\n  'deleteMany'\n];\n\nconst mockedReturn = function(cb) {\n  const { op, model: { modelName }} = this;\n  const Model = mongoose.model(modelName);\n\n  let mock = mockingoose.__mocks[modelName] && mockingoose.__mocks[modelName][op];\n\n  let err = null;\n\n  if(mock instanceof Error) err = mock;\n\n  if(!mock && op === 'save') { mock = this;}\n\n  if(mock && mock instanceof Model === false && (op !== 'update')) {\n    mock = Array.isArray(mock) ? mock.map(item => new Model(item)) : new Model(mock);\n  }\n\n  if(cb) return cb(err, mock);\n\n  if(err) return Promise.reject(err);\n\n  return Promise.resolve(mock)\n};\n\nops.forEach(op => {\n  mongoose.Query.prototype[op] = jest.fn().mockImplementation(function (criteria, doc, options, callback) {\n    switch (arguments.length) {\n      case 3:\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        break;\n      case 2:\n        if (typeof doc === 'function') {\n          callback = doc;\n          doc = criteria;\n          criteria = undefined;\n        }\n        options = undefined;\n        break;\n      case 1:\n        if (typeof criteria === 'function') {\n          callback = criteria;\n          criteria = options = doc = undefined;\n        } else {\n          doc = criteria;\n          criteria = options = undefined;\n        }\n    }\n\n    this.op = op;\n\n    if(!callback) return this;\n\n    return this.exec.call(this, callback);\n  })\n});\n\nmongoose.Query.prototype.exec = jest.fn().mockImplementation(function cb(cb) {\n  return mockedReturn.call(this, cb);\n});\n\nmongoose.Model.prototype.save = function(options, cb) {\n  const op = 'save';\n  const { modelName } = this.constructor;\n\n  if(typeof options === 'function') cb = options;\n\n  Object.assign(this, { op, model: { modelName }});\n\n  return mockedReturn.call(this, cb);\n};\n\njest.doMock('mongoose', () => mongoose);\n\nconst target = {\n  __mocks: {},\n  resetAll() { this.__mocks = {} },\n  toJSON() { return this.__mocks }\n};\n\nconst traps = {\n  get(target, prop) {\n    if(target.hasOwnProperty(prop)) return Reflect.get(target, prop);\n\n    return {\n      toReturn(o, op = 'find') {\n        target.__mocks.hasOwnProperty(prop)\n            ? target.__mocks[prop][op] = o\n            : target.__mocks[prop] = { [op]: o };\n\n        return this;\n      },\n\n      reset(op) {\n        op && delete target.__mocks[prop][op] || delete target.__mocks[prop];\n\n        return this;\n      },\n\n      toJSON() {\n        return target.__mocks[prop] || {};\n      }\n    };\n  }\n};\n\nconst mockingoose = new Proxy(target, traps);\n\nexport default mockingoose;\n"]}